{"version":3,"file":"static/js/156.a2c9059e.chunk.js","mappings":"sPAIA,MAaA,EAbkBA,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAUC,IAAI,cACxBN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRC,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKC,IAAKG,EAAcD,IAAI,oB,yGCVxC,MAQA,EARqBE,KAEnBL,EAAAA,EAAAA,KAAA,OACEM,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAC1FV,IAAKW,EAAKT,IAAI,S,4GCMlB,MAgCA,EAhCmBU,IAA4B,IAA3B,UAACC,EAAS,SAAEC,GAASF,EACvC,MAAM,GAACG,IAAMC,EAAAA,EAAAA,MACNC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,SAACC,EAAQ,aAAEC,EAAY,WAAEC,EAAU,QAAEC,EAAO,WAAEC,IAAcC,EAAAA,EAAAA,MAElEC,EAAAA,EAAAA,YAAU,KACRC,GAAY,GACX,CAACZ,IAEJ,MAAMY,EAAaA,KAGjB,OAFAL,IAEQR,GACN,IAAK,QACHM,EAASL,GAAIa,KAAKC,GAAcD,MAAK,IAAMJ,EAAW,eACpD,MACJ,IAAK,YACHH,EAAaN,GAAIa,KAAKC,GAAcD,MAAK,IAAMJ,EAAW,eAC9D,EAGIK,EAAgBZ,IACpBC,EAAQD,EAAK,EAEf,OACErB,EAAAA,EAAAA,MAAAkC,EAAAA,SAAA,CAAAhC,SAAA,EACEC,EAAAA,EAAAA,KAACJ,EAAAA,EAAS,KACToC,EAAAA,EAAAA,GAAWR,EAASV,EAAWI,KAC/B,C,+CCrCA,MCsFP,EAvFyBQ,KAExB,MAAM,QAACO,EAAO,WAAEV,EAAU,QAAEC,EAAO,WAAEC,GDDfS,MACrB,MAAOV,EAASC,IAAcL,EAAAA,EAAAA,UAAS,WA0CvC,MAAO,CAACa,SAvCQE,EAAAA,EAAAA,cAAYC,eAC1BC,GAMI,IALJC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MACTG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACPI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CACR,eAAgB,oBAKlBd,EAAW,WAGX,IAEE,MAAMmB,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,oBAAoBV,cAAgBO,EAASI,UAM/D,aAHmBJ,EAASK,MAI9B,CAAE,MAAOC,GAIP,MAFFzB,EAAW,SAEHyB,CACR,CACF,GAAG,IAQc3B,YALEY,EAAAA,EAAAA,cAAY,KAE7BV,EAAW,UAAU,GACpB,IAE0BD,UAASC,aAAW,EC1CES,GAG9CiB,EAAW,4CAEXC,EAAU,0CAsCTC,EAAuBC,IACtB,CACHtC,GAAIsC,EAAKtC,GACTuC,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAc,GAAGF,EAAKE,YAAYC,MAAM,EAAG,UAAY,6CACzEC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAGzB,IACvB0B,KAAMT,EAAKQ,KAAK,GAAGzB,IACnB2B,OAAQV,EAAKU,OAAOC,QAKnBC,EAAoBF,IAAY,IAADG,EACpC,MAAO,CACNnD,GAAIgD,EAAOhD,GACXoD,MAAOJ,EAAOI,MACdZ,YAAaQ,EAAOR,aAAe,0BACnCa,UAAWL,EAAOK,UACf,GAAGL,EAAOK,eACV,2CACHX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBH,EAAAH,EAAOO,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOR,EAAOS,OAAO,GAAGD,MACrB,GAAGR,EAAOS,OAAO,GAAGD,SACpB,gBACHX,SAAUG,EAAOF,KAAK,GAAGzB,IACzB,EAIF,MAAO,CACNd,aACAC,UACAC,aACAiD,iBAjEwBtC,iBAAiC,IAA1BuC,EAAMpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GANlB,IAQnB,aADkBN,EAAQ,GAAGkB,8BAAqCwB,KAAUvB,MACjElC,KAAK0D,QAAQC,IAAIxB,EAC7B,EA+DCyB,mBA1C0B1C,gBACRH,EAAQ,GAAGkB,oBAA2BI,KAAQH,MACrDlC,KAAK0D,QAAQC,IAAIxB,GAyC5B/B,aA7DoBc,UACpB,MAAM2C,QAAY9C,EAAQ,GAAGkB,eAAsBnC,KAAMoC,KACzD,OAAOC,EAAoB0B,EAAI7D,KAAK0D,QAAQ,GAAG,EA4D/CI,aAxDoB5C,iBAAuC,IAAhCuC,EAAMpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAfR,IAiBzB,aADkBN,EAAQ,GAAGkB,0BAAiCwB,KAAUvB,MAC7DlC,KAAK0D,QAAQC,IAAIX,EAC7B,EAsDC7C,SAnDgBe,UAChB,MAAM2C,QAAY9C,EAAQ,GAAGkB,WAAkBnC,KAAMoC,KACrD,OAAOc,EAAiBa,EAAI7D,KAAK0D,QAAQ,GAAG,EAiDnC,C,yDCpFX,MAiBA,EAjBiBK,KAETpF,EAAAA,EAAAA,MAAAkC,EAAAA,SAAA,CAAAhC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAEnBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gC,cCR/B,MAeA,EAfmBkC,CAACR,EAASV,EAAWI,KACtC,OAAQM,GACN,IAAK,UACH,OAAOxB,EAAAA,EAAAA,KAACiF,EAAQ,IAClB,IAAK,UACH,OAAOjF,EAAAA,EAAAA,KAACkF,EAAAA,EAAO,IACjB,IAAK,YACH,OAAOlF,EAAAA,EAAAA,KAACc,EAAS,CAACI,KAAMA,IAC1B,IAAK,QACH,OAAOlB,EAAAA,EAAAA,KAACK,EAAAA,EAAY,IACtB,QACE,MAAM,IAAI0C,MAAM,4BACpB,C","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n  <img \r\n    style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  \r\n    src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","/* eslint-disable default-case */\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\r\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\r\n// А если вынесем их все в App.js - то они будут одни на все страницы\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n  const {id} = useParams();\r\n  const [data, setData] = useState(null);\r\n  const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData()\r\n  }, [id])\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n          break;\r\n      case 'character':\r\n        getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n    }\r\n  }\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  }\r\n  return (\r\n    <>\r\n      <AppBanner/>\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\n// хук, который будет работать с запросами\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting'); //ожидание\r\n\r\n  // функция, которая делает запросы\r\n  const request = useCallback(async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = { \r\n      'Content-Type': 'application/json' \r\n    },\r\n  ) => {\r\n    \r\n    // обозначаем процесс загрузки\r\n    setProcess('loading')\r\n\r\n    // обработка асинхронного запроса\r\n    try {\r\n    // создаем fetch-запрос\r\n      const response = await fetch(url, {method, body, headers});\r\n    // выбрасываем ошибку, если что-то пошло не так\r\n      if (!response.ok) {\r\n        throw new Error(`Could not featch ${url}, status: ${response.status}`);\r\n      }\r\n    // получаем данные в формате JSON:\r\n      const data = await response.json();\r\n\r\n    // возвращаем данные\r\n      return data;\r\n    } catch (e) {\r\n    // процесс возникновения ошибки\r\n    setProcess('error')\r\n    // выкидывем ошибку\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  // очищаем ошибку\r\n  const clearError = useCallback(() => {\r\n    // обозначаем процесс загрузки\r\n    setProcess('loading')\r\n  }, []);\r\n\r\n  return {request, clearError, process, setProcess};\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\t// импортируем все переменные, которые есть в хуке useHttp\r\n\tconst {request, clearError, process, setProcess } = useHttp();\r\n\t\r\n\t// начальное название API\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// мой ключ\r\n\tconst _apiKey = 'apikey=129b3670ad033d82bbeb6ea2a1095d5c';\r\n\t//базовый отступ  у персонажей\r\n\tconst _baseOffset = 650;\r\n\r\n\t//базовый отступ у комиксов\r\n\tconst _baseOffsetComics = 340;\r\n\r\n\t// получение всех персонажей\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// получение одного персонжа\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\t// получение всех комиксов\r\n\tconst getAllComics = async (offset = _baseOffsetComics) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\t// получение одного комикса\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\t// получение персонажа при поиске\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  // трансформация персонажа\r\n  const _transformCharacter = (char) => {\t\r\n\t\treturn {\r\n\t\t\t\t\t\tid: char.id,\r\n\t\t\t\t\t\tname: char.name,\r\n\t\t\t\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\t\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\t\t\t\thomepage: char.urls[0].url,\r\n\t\t\t\t\t\twiki: char.urls[1].url,\r\n\t\t\t\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n  }\r\n\r\n\t// трансформация данных с комиксами\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\thomepage: comics.urls[0].url,\r\n\t\t}\r\n\t}\r\n\r\n\t// возвращаем объект из функции\r\n\treturn { \r\n\t\tclearError, \r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacterByName, \r\n\t\tgetCharacter, \r\n\t\tgetAllComics, \r\n\t\tgetComic};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\n//установка контента на странице\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","Skeleton","Spinner"],"sourceRoot":""}