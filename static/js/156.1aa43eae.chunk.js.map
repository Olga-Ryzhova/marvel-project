{"version":3,"file":"static/js/156.1aa43eae.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n  <img \r\n    style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  \r\n    src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\r\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\r\n// А если вынесем их все в App.js - то они будут одни на все страницы\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n  const {id} = useParams();\r\n  const [data, setData] = useState(null);\r\n  const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData()\r\n  }, [id])\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id).then(onDataLoaded);\r\n          break;\r\n      case 'character':\r\n        getCharacter(id).then(onDataLoaded);\r\n    }\r\n  }\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  }\r\n\r\n  const errorMessage = error ? <ErrorMessage/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n  return (\r\n    <>\r\n      <AppBanner/>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\n// хук, который будет работать с запросами\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n  // функция, которая делает запросы\r\n  const request = useCallback(async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = { \r\n      'Content-Type': 'application/json' \r\n    },\r\n  ) => {\r\n    \r\n    // перед отправкой запроса показываем спиннер\r\n    setLoading(true);\r\n\r\n    // обработка асинхронного запроса\r\n    try {\r\n    // создаем fetch-запрос\r\n      const response = await fetch(url, {method, body, headers});\r\n    // выбрасываем ошибку, если что-то пошло не так\r\n      if (!response.ok) {\r\n        throw new Error(`Could not featch ${url}, status: ${response.status}`);\r\n      }\r\n    // получаем данные в формате JSON:\r\n      const data = await response.json();\r\n\r\n    // после успешной загрузки скрываем спиннер\r\n    setLoading(false);\r\n\r\n    // возвращаем данные\r\n      return data;\r\n    } catch (e) {\r\n    // в любом случае скрываем спиннер\r\n      setLoading(false);\r\n    // в состояние error добавляем сообщение об ошибке\r\n      setError(e.message);\r\n    // выкидывем ошибку\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  // очищаем ошибку\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError};\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\t// импортируем все переменные, которые есть в хуке useHttp\r\n\tconst {loading, request, error, clearError } = useHttp();\r\n\t\r\n\t// начальное название API\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// мой ключ\r\n\tconst _apiKey = 'apikey=129b3670ad033d82bbeb6ea2a1095d5c';\r\n\t//базовый отступ  у персонажей\r\n\tconst _baseOffset = 650;\r\n\r\n\t//базовый отступ у комиксов\r\n\tconst _baseOffsetComics = 340;\r\n\r\n\t// получение всех персонажей\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// получение одного персонжа\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\t// получение всех комиксов\r\n\tconst getAllComics = async (offset = _baseOffsetComics) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\t// получение одного комикса\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\t// получение персонажа при поиске\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  // трансформация персонажа\r\n  const _transformCharacter = (char) => {\t\r\n\t\treturn {\r\n\t\t\t\t\t\tid: char.id,\r\n\t\t\t\t\t\tname: char.name,\r\n\t\t\t\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\t\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\t\t\t\thomepage: char.urls[0].url,\r\n\t\t\t\t\t\twiki: char.urls[1].url,\r\n\t\t\t\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n  }\r\n\r\n\t// трансформация данных с комиксами\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\thomepage: comics.urls[0].url,\r\n\t\t}\r\n\t}\r\n\r\n\t// возвращаем объект из функции\r\n\treturn {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics"],"sourceRoot":""}