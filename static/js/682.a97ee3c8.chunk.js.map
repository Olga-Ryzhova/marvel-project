{"version":3,"file":"static/js/682.a97ee3c8.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n  <img \r\n    style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  \r\n    src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n\tconst [comicsList, setComicsList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(340);\n\tconst [comicsEnded , setComicsEnded] = useState(false);\n\n\t// вызываем функцию\n\tconst {loading, error, getAllComics} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\t// отправка запроса при клике на кнопку \"LOAD MORE\"\n\tconst onRequest = (offset, initial) => {\n\t\t// функция, которая будет отвечать за процесс дозагрузки\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllComics(offset)\n\t\t\t.then(onComicsListLoaded)\n\t}\n\n\tconst onComicsListLoaded = (newComicsList) => {\n\t\tlet ended = false;\n\t\tif (newComicsList.length < 8) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetComicsList(comicsList => [...comicsList, ...newComicsList]);\n\t\tsetnewItemLoading(newItemLoading => false);\n\t\tsetOffset(offset => offset + 8);\n\t\tsetComicsEnded(comicsEnded => ended);\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst items  = arr.map((item, i) => {\n\t\t\treturn (\n\t\t\t\t<li \n\t\t\t\t\tclassName=\"comics__item\"\n\t\t\t\t\tkey={item.id}>\n\t\t\t\t\t<Link to={`/comics/${item.id}`}>\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n\t\t\t\t\t\t<div className=\"comics__item-name\">{item.title}</div>\n\t\t\t\t\t\t<div className=\"comics__item-price\">{item.price}</div>\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<ul className=\"comics__grid\">\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\tconst items = renderItems(comicsList);\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\treturn (\n\t\t<div className=\"comics__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items }\n\t\t\t\t<button className=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{'display': comicsEnded ? 'none' : 'block'}}\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with last of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\n// хук, который будет работать с запросами\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n  // функция, которая делает запросы\r\n  const request = useCallback(async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = { \r\n      'Content-Type': 'application/json' \r\n    },\r\n  ) => {\r\n    \r\n    // перед отправкой запроса показываем спиннер\r\n    setLoading(true);\r\n\r\n    // обработка асинхронного запроса\r\n    try {\r\n    // создаем fetch-запрос\r\n      const response = await fetch(url, {method, body, headers});\r\n    // выбрасываем ошибку, если что-то пошло не так\r\n      if (!response.ok) {\r\n        throw new Error(`Could not featch ${url}, status: ${response.status}`);\r\n      }\r\n    // получаем данные в формате JSON:\r\n      const data = await response.json();\r\n\r\n    // после успешной загрузки скрываем спиннер\r\n    setLoading(false);\r\n\r\n    // возвращаем данные\r\n      return data;\r\n    } catch (e) {\r\n    // в любом случае скрываем спиннер\r\n      setLoading(false);\r\n    // в состояние error добавляем сообщение об ошибке\r\n      setError(e.message);\r\n    // выкидывем ошибку\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  // очищаем ошибку\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError};\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\t// импортируем все переменные, которые есть в хуке useHttp\r\n\tconst {loading, request, error, clearError } = useHttp();\r\n\t\r\n\t// начальное название API\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// мой ключ\r\n\tconst _apiKey = 'apikey=129b3670ad033d82bbeb6ea2a1095d5c';\r\n\t//базовый отступ  у персонажей\r\n\tconst _baseOffset = 650;\r\n\r\n\t//базовый отступ у комиксов\r\n\tconst _baseOffsetComics = 340;\r\n\r\n\t// получение всех персонажей\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// получение одного персонжа\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\t// получение всех комиксов\r\n\tconst getAllComics = async (offset = _baseOffsetComics) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\t// получение одного комикса\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\t// получение персонажа при поиске\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  // трансформация персонажа\r\n  const _transformCharacter = (char) => {\t\r\n\t\treturn {\r\n\t\t\t\t\t\tid: char.id,\r\n\t\t\t\t\t\tname: char.name,\r\n\t\t\t\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\t\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\t\t\t\thomepage: char.urls[0].url,\r\n\t\t\t\t\t\twiki: char.urls[1].url,\r\n\t\t\t\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n  }\r\n\r\n\t// трансформация данных с комиксами\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\thomepage: comics.urls[0].url,\r\n\t\t}\r\n\t}\r\n\r\n\t// возвращаем объект из функции\r\n\treturn {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","props","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","ComicsList","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacterByName","getCharacter","res","getComic"],"sourceRoot":""}