{"version":3,"file":"static/js/896.0cbe0474.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n  <img \r\n    style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  \r\n    src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect, useState } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({});\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 6000000000);\n\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, [])\n\n\t// отвечает за конечный результат\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\t// обновление персонажа\n\tconst updateChar = () => {\n\t\t// очищаем ошибку\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded);\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error) ? <View char={char}/> : null;\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br/>\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</p>\n\t\t\t\t<button className=\"button button__main\" onClick={updateChar}>\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki} = char;\n\t\n\tlet imgStyle = {'objectFit' : 'cover'};\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = {'objectFit' : 'contain'};\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">{description}</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(198);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\t// вызываем функцию\n\tconst {loading, error, getAllCharacters} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true); \n\t\t\n\t}, []);\n\n\t// отправка запроса при клике на кнопку \"LOAD MORE\"\n\tconst onRequest = (offset, initial) => {\n\t\t// функция, которая будет отвечать за процесс дозагрузки\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t}\n\t\n\tconst onCharListLoaded = (newCharList) => {\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetCharList(charList => [...charList, ...newCharList]);\n\t\tsetNewItemLoading(newItemLoading => false);\n\t\tsetOffset(offset => offset + 9);\n\t\tsetCharEnded(charEnded => ended);\n\t}\n\n\t// console.log('charList');\n\t\n\n\t// реализация ref\n\tconst itemRefs = useRef([]);\n\n\t// фокусировка элемента\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\t// Этот метод создан для оптимизации, \n\t// чтобы не помещать такую конструкцию в метод render\n\tfunction renderItems(arr) {\n\t\tconst items =  arr.map((item, i) => {\n\t\t\tlet imgStyle = {'objectFit' : 'cover'};\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\t\timgStyle = {'objectFit' : 'unset'};\n\t\t\t}\n\t\t\t\t\n\t\t\treturn (\n\t\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n\t\t\t\t\t<li  \n\t\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\t\tref={el => itemRefs.current[i] = el}  //использование ref\n\t\t\t\t\t\ttabIndex={0}   //возможность переключать персонажей через tab\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}}\n\t\t\n\t\t\t\t\t\t// Обработчик событий onKeyUp:\n\t\t\t\t\t\tonKeyUp ={(e) => {  \n\t\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\n\t\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n\t\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t\t</li>\n\t\t\t\t</CSSTransition>\n\t\t\t)\n\t\t});\n\t\t\n\t\t// А эта конструкция вынесена для центровки спиннера/ошибки\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t <TransitionGroup component={null}>\n\t\t\t\t\t\t{items}\n\t\t\t\t\t</TransitionGroup>\n\t\t\t</ul>\n\t\t)\n\t}\n\t\t\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\t\t\t<button \n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{'display': charEnded ? 'none' : 'block'}}\n\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t\t>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button> \n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\tconst [char, setChar] = useState(null);\n\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t}, [props.charId])\n\n\t// обновление персонажа\n\tconst updateChar = () => {\n\t\tconst {charId} = props;\n\t\tif(!charId) return;\n\n\t\t// очищаем ошибку\n\t\tclearError();\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t}\n\n\t// отвечает за конечный результат\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst skeleton = char || loading || error ? null : <Skeleton/>;\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{skeleton}\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</div>\n\t)\n}\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki, comics} = char;\n\n\tlet imgStyle = {'objectFit' : 'cover'};\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = {'objectFit' : 'contain'};\n\t}\n\t\n\treturn (\n\t<>\n\t\t<div className=\"char__basics\">\n\t\t\t<img src={thumbnail} alt={name} style={imgStyle}/>\n\t\t\t<div>\n\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div className=\"char__descr\">{description}</div>\n\t\t\n\n\t\t<div className=\"char__comics\">Comics:</div>\n\t\t<ul className=\"char__comics-list\">\n\t\t{comics.length > 0 ? null : 'There is no comics with this character'}\n\t\t\t{\n\t\t\t\tcomics.map((item, i) => {\n\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\tif (i > 9) return;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}              \n\t\t</ul>\n\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n\t\r\n\tconst {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n\t// запрос на сервер\r\n\tconst updateChar = (name) => {\r\n\t\t// очищаем ошибку\r\n\t\tclearError();\r\n\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded)\r\n\t}\r\n\r\n\t// устаналивает состояние\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\t// если ошибка при запросе на сервер\r\n\tconst errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n\t// запись результат\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t\t\t\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\t\r\n\t\t\t\t\t\t\t\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>: \r\n\t\t\t\t\t\t\t\t\t<div className=\"char__search-error\">\r\n\t\t\t\t\t\t\t\t\t\t\tThe character was not found. Check the name and try again\r\n\t\t\t\t\t\t\t\t\t</div>;\r\n\r\n  return (\r\n\t\t<div className=\"char__search-form\"> \r\n\t\t\t<Formik \r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: ''\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema = {Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required('This field is required!'),\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit = { ({charName}) => {\r\n\t\t\t\t\tupdateChar(charName);\r\n\t\t\t\t}}>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field \r\n\t\t\t\t\t\t\tid=\"charName\" \r\n\t\t\t\t\t\t\tname='charName' \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\"/>\r\n\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\ttype='submit' \r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={loading}>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n  )\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);    \r\n    this.setState({error: true})\r\n  }\r\n\r\n  render() {\r\n    if(this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n\t// метод, устанавливающий selectedChar\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t};\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\n// хук, который будет работать с запросами\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n  // функция, которая делает запросы\r\n  const request = useCallback(async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = { \r\n      'Content-Type': 'application/json' \r\n    },\r\n  ) => {\r\n    \r\n    // перед отправкой запроса показываем спиннер\r\n    setLoading(true);\r\n\r\n    // обработка асинхронного запроса\r\n    try {\r\n    // создаем fetch-запрос\r\n      const response = await fetch(url, {method, body, headers});\r\n    // выбрасываем ошибку, если что-то пошло не так\r\n      if (!response.ok) {\r\n        throw new Error(`Could not featch ${url}, status: ${response.status}`);\r\n      }\r\n    // получаем данные в формате JSON:\r\n      const data = await response.json();\r\n\r\n    // после успешной загрузки скрываем спиннер\r\n    setLoading(false);\r\n\r\n    // возвращаем данные\r\n      return data;\r\n    } catch (e) {\r\n    // в любом случае скрываем спиннер\r\n      setLoading(false);\r\n    // в состояние error добавляем сообщение об ошибке\r\n      setError(e.message);\r\n    // выкидывем ошибку\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  // очищаем ошибку\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError};\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\t// импортируем все переменные, которые есть в хуке useHttp\r\n\tconst {loading, request, error, clearError } = useHttp();\r\n\t\r\n\t// начальное название API\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// мой ключ\r\n\tconst _apiKey = 'apikey=129b3670ad033d82bbeb6ea2a1095d5c';\r\n\t//базовый отступ  у персонажей\r\n\tconst _baseOffset = 650;\r\n\r\n\t//базовый отступ у комиксов\r\n\tconst _baseOffsetComics = 340;\r\n\r\n\t// получение всех персонажей\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// получение одного персонжа\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\t// получение всех комиксов\r\n\tconst getAllComics = async (offset = _baseOffsetComics) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\t// получение одного комикса\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\t// получение персонажа при поиске\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  // трансформация персонажа\r\n  const _transformCharacter = (char) => {\t\r\n\t\treturn {\r\n\t\t\t\t\t\tid: char.id,\r\n\t\t\t\t\t\tname: char.name,\r\n\t\t\t\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\t\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\t\t\t\thomepage: char.urls[0].url,\r\n\t\t\t\t\t\twiki: char.urls[1].url,\r\n\t\t\t\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n  }\r\n\r\n\t// трансформация данных с комиксами\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\thomepage: comics.urls[0].url,\r\n\t\t}\r\n\t}\r\n\r\n\t// возвращаем объект из функции\r\n\treturn {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","ref","el","tabIndex","onCharSelected","onKeyUp","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","CharSearchForm","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}