{"version":3,"file":"static/js/682.9a601222.chunk.js","mappings":"sPAIA,MAaA,EAbkBA,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAUC,IAAI,cACxBN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRC,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKC,IAAKG,EAAcD,IAAI,oB,yGCVxC,MAQA,EARqBE,KAEnBL,EAAAA,EAAAA,KAAA,OACEM,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAC1FV,IAAKW,EAAKT,IAAI,S,uHCGlB,MAAMU,EAAaA,CAACC,EAASC,EAAWC,KACtC,OAAQF,GACN,IAAK,UACH,OAAOd,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,IAEjB,IAAK,UACH,OAAOD,GAAiBhB,EAAAA,EAAAA,KAACe,EAAS,KAAKf,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,IAEjD,IAAK,YACH,OAAOjB,EAAAA,EAAAA,KAACe,EAAS,IAEnB,IAAK,QACH,OAAOf,EAAAA,EAAAA,KAACK,EAAAA,EAAY,IAEtB,QACE,MAAM,IAAIa,MAAM,4BACpB,EAwEF,EArEoBC,IACnB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCN,EAAgBO,IAAqBD,EAAAA,EAAAA,WAAS,IAC9CE,EAAQC,IAAaH,EAAAA,EAAAA,UAAS,MAC9BI,EAAcC,IAAkBL,EAAAA,EAAAA,WAAS,IAG1C,QAACM,EAAO,MAAEC,EAAK,aAAEC,EAAY,QAAEhB,EAAO,WAAEiB,IAAcC,EAAAA,EAAAA,MAE5DC,EAAAA,EAAAA,YAAU,KACTC,EAAUV,GAAQ,EAAK,GACrB,IAGH,MAAMU,EAAYA,CAACV,EAAQW,KAEhBZ,GAAVY,GACAL,EAAaN,GACXY,KAAKC,GACLD,MAAK,IAAML,EAAW,cAAa,EAGhCM,EAAsBC,IAC3B,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IAC1BD,GAAQ,GAGTlB,GAAcD,GAAc,IAAIA,KAAekB,KAC/Cf,GAAkBP,IAAkB,IACpCS,GAAUD,GAAUA,EAAS,IAC7BG,GAAeD,GAAea,GAAM,EAyBrC,OACC1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1Bc,EAAWC,GAAS,IAxBxB,SAAqB2B,GACpB,MAAMC,EAASD,EAAIE,KAAI,CAACC,EAAMC,KAE5B7C,EAAAA,EAAAA,KAAA,MACCF,UAAU,eAAcC,UAExBF,EAAAA,EAAAA,MAACiD,EAAAA,GAAI,CAACC,GAAI,WAAWH,EAAKI,KAAKjD,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKC,IAAK2C,EAAKK,UAAW9C,IAAKyC,EAAKM,MAAOpD,UAAU,sBACrDE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,SAAE6C,EAAKM,SACzClD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAAE6C,EAAKO,YAJtCP,EAAKI,MAUb,OACChD,EAAAA,EAAAA,KAAA,MAAIF,UAAU,eAAcC,SAC1B2C,GAGJ,CAI8BU,CAAYhC,IAAaJ,IACpDhB,EAAAA,EAAAA,KAAA,UAAQF,UAAU,mCAClBuD,SAAUrC,EACVV,MAAO,CAAC,QAAWoB,EAAc,OAAS,SAC1C4B,QAASA,IAAMpB,EAAUV,GAAQzB,UAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SAAC,kBAEpB,E,cCxFR,MAgBA,EAhBmBwD,KAEf1D,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAAzD,SAAA,EACEF,EAAAA,EAAAA,MAAC4D,EAAAA,EAAM,CAAA1D,SAAA,EACLC,EAAAA,EAAAA,KAAA,QACE0D,KAAK,cACLC,QAAQ,kCAEV3D,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAACJ,EAAAA,EAAS,KACVI,EAAAA,EAAAA,KAAC4D,EAAU,M,+CCbV,MCsFP,EAvFyB5B,KAExB,MAAM,QAAC6B,EAAO,WAAEC,EAAU,QAAEhD,EAAO,WAAEiB,GDDfgC,MACrB,MAAOjD,EAASiB,IAAcT,EAAAA,EAAAA,UAAS,WA0CvC,MAAO,CAACuC,SAvCQG,EAAAA,EAAAA,cAAYC,eAC1BC,GAMI,IALJC,EAAMC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACTE,EAAIF,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACPG,EAAOH,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CACR,eAAgB,oBAKlBrC,EAAW,WAGX,IAEE,MAAMyC,QAAiBC,MAAMP,EAAK,CAACC,SAAQG,OAAMC,YAEjD,IAAKC,EAASE,GACZ,MAAM,IAAIxD,MAAM,oBAAoBgD,cAAgBM,EAASG,UAM/D,aAHmBH,EAASI,MAI9B,CAAE,MAAOC,GAIP,MAFF9C,EAAW,SAEH8C,CACR,CACF,GAAG,IAQcf,YALEE,EAAAA,EAAAA,cAAY,KAE7BjC,EAAW,UAAU,GACpB,IAE0BjB,UAASiB,aAAW,EC1CEgC,GAG9Ce,EAAW,4CAEXC,EAAU,0CAsCTC,EAAuBC,IACtB,CACHjC,GAAIiC,EAAKjC,GACTU,KAAMuB,EAAKvB,KACXwB,YAAaD,EAAKC,YAAc,GAAGD,EAAKC,YAAYC,MAAM,EAAG,UAAY,6CACzElC,UAAWgC,EAAKhC,UAAUmC,KAAO,IAAMH,EAAKhC,UAAUoC,UACtDC,SAAUL,EAAKM,KAAK,GAAGrB,IACvBsB,KAAMP,EAAKM,KAAK,GAAGrB,IACnBuB,OAAQR,EAAKQ,OAAO/C,QAKnBgD,EAAoBD,IAAY,IAADE,EACpC,MAAO,CACN3C,GAAIyC,EAAOzC,GACXE,MAAOuC,EAAOvC,MACdgC,YAAaO,EAAOP,aAAe,0BACnCU,UAAWH,EAAOG,UACf,GAAGH,EAAOG,eACV,2CACH3C,UAAWwC,EAAOxC,UAAUmC,KAAO,IAAMK,EAAOxC,UAAUoC,UAC1DQ,UAA+B,QAArBF,EAAAF,EAAOK,YAAY,UAAE,IAAAH,OAAA,EAArBA,EAAuBE,WAAY,QAC7C1C,MAAOsC,EAAOM,OAAO,GAAG5C,MACrB,GAAGsC,EAAOM,OAAO,GAAG5C,SACpB,gBACHmC,SAAUG,EAAOF,KAAK,GAAGrB,IACzB,EAIF,MAAO,CACNJ,aACAhD,UACAiB,aACAiE,iBAjEwB/B,iBAAiC,IAA1BzC,EAAM4C,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GANlB,IAQnB,aADkBP,EAAQ,GAAGiB,8BAAqCtD,KAAUuD,MACjEkB,KAAKC,QAAQvD,IAAIqC,EAC7B,EA+DCmB,mBA1C0BlC,gBACRJ,EAAQ,GAAGiB,oBAA2BpB,KAAQqB,MACrDkB,KAAKC,QAAQvD,IAAIqC,GAyC5BoB,aA7DoBnC,UACpB,MAAMoC,QAAYxC,EAAQ,GAAGiB,eAAsB9B,KAAM+B,KACzD,OAAOC,EAAoBqB,EAAIJ,KAAKC,QAAQ,GAAG,EA4D/CpE,aAxDoBmC,iBAAuC,IAAhCzC,EAAM4C,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAfR,IAiBzB,aADkBP,EAAQ,GAAGiB,0BAAiCtD,KAAUuD,MAC7DkB,KAAKC,QAAQvD,IAAI+C,EAC7B,EAsDCY,SAnDgBrC,UAChB,MAAMoC,QAAYxC,EAAQ,GAAGiB,WAAkB9B,KAAM+B,KACrD,OAAOW,EAAiBW,EAAIJ,KAAKC,QAAQ,GAAG,EAiDnC,C","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n  <img \r\n    style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  \r\n    src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","/* eslint-disable no-unreachable */\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n//установка контента на странице\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner/>;\n      break;\n    case 'loading':\n      return newItemLoading ? <Component/> : <Spinner/>;\n      break;\n    case 'confirmed':\n      return <Component/>;\n      break;\n    case 'error':\n      return <ErrorMessage/>;\n      break;\n    default:\n      throw new Error('Unexpected process state');\n  }\n}\n\nconst ComicsList = (props) => {\n\tconst [comicsList, setComicsList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(340);\n\tconst [comicsEnded , setComicsEnded] = useState(false);\n\n\t// вызываем функцию\n\tconst {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\t// отправка запроса при клике на кнопку \"LOAD MORE\"\n\tconst onRequest = (offset, initial) => {\n\t\t// функция, которая будет отвечать за процесс дозагрузки\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllComics(offset)\n\t\t\t.then(onComicsListLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\t}\n\n\tconst onComicsListLoaded = (newComicsList) => {\n\t\tlet ended = false;\n\t\tif (newComicsList.length < 8) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetComicsList(comicsList => [...comicsList, ...newComicsList]);\n\t\tsetnewItemLoading(newItemLoading => false);\n\t\tsetOffset(offset => offset + 8);\n\t\tsetComicsEnded(comicsEnded => ended);\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst items  = arr.map((item, i) => {\n\t\t\treturn (\n\t\t\t\t<li \n\t\t\t\t\tclassName=\"comics__item\"\n\t\t\t\t\tkey={item.id}>\n\t\t\t\t\t<Link to={`/comics/${item.id}`}>\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n\t\t\t\t\t\t<div className=\"comics__item-name\">{item.title}</div>\n\t\t\t\t\t\t<div className=\"comics__item-price\">{item.price}</div>\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<ul className=\"comics__grid\">\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div className=\"comics__list\">\n\t\t\t\t{setContent(process, () => renderItems(comicsList), newItemLoading)}\n\t\t\t\t<button className=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{'display': comicsEnded ? 'none' : 'block'}}\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with last of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\n// хук, который будет работать с запросами\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting'); //ожидание\r\n\r\n  // функция, которая делает запросы\r\n  const request = useCallback(async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = { \r\n      'Content-Type': 'application/json' \r\n    },\r\n  ) => {\r\n    \r\n    // обозначаем процесс загрузки\r\n    setProcess('loading')\r\n\r\n    // обработка асинхронного запроса\r\n    try {\r\n    // создаем fetch-запрос\r\n      const response = await fetch(url, {method, body, headers});\r\n    // выбрасываем ошибку, если что-то пошло не так\r\n      if (!response.ok) {\r\n        throw new Error(`Could not featch ${url}, status: ${response.status}`);\r\n      }\r\n    // получаем данные в формате JSON:\r\n      const data = await response.json();\r\n\r\n    // возвращаем данные\r\n      return data;\r\n    } catch (e) {\r\n    // процесс возникновения ошибки\r\n    setProcess('error')\r\n    // выкидывем ошибку\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  // очищаем ошибку\r\n  const clearError = useCallback(() => {\r\n    // обозначаем процесс загрузки\r\n    setProcess('loading')\r\n  }, []);\r\n\r\n  return {request, clearError, process, setProcess};\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\t// импортируем все переменные, которые есть в хуке useHttp\r\n\tconst {request, clearError, process, setProcess } = useHttp();\r\n\t\r\n\t// начальное название API\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// мой ключ\r\n\tconst _apiKey = 'apikey=129b3670ad033d82bbeb6ea2a1095d5c';\r\n\t//базовый отступ  у персонажей\r\n\tconst _baseOffset = 650;\r\n\r\n\t//базовый отступ у комиксов\r\n\tconst _baseOffsetComics = 340;\r\n\r\n\t// получение всех персонажей\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// получение одного персонжа\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\t// получение всех комиксов\r\n\tconst getAllComics = async (offset = _baseOffsetComics) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\t// получение одного комикса\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\t// получение персонажа при поиске\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  // трансформация персонажа\r\n  const _transformCharacter = (char) => {\t\r\n\t\treturn {\r\n\t\t\t\t\t\tid: char.id,\r\n\t\t\t\t\t\tname: char.name,\r\n\t\t\t\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\t\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\t\t\t\thomepage: char.urls[0].url,\r\n\t\t\t\t\t\twiki: char.urls[1].url,\r\n\t\t\t\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n  }\r\n\r\n\t// трансформация данных с комиксами\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t\thomepage: comics.urls[0].url,\r\n\t\t}\r\n\t}\r\n\r\n\t// возвращаем объект из функции\r\n\treturn { \r\n\t\tclearError, \r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacterByName, \r\n\t\tgetCharacter, \r\n\t\tgetAllComics, \r\n\t\tgetComic};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","props","comicsList","setComicsList","useState","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","Link","to","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","ComicsList","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacterByName","getCharacter","res","getComic"],"sourceRoot":""}